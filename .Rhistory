# Use a reactive expression by calling it like a function
summary(dataset())
output$table <- renderTable({
dataset()
})
# Use a reactive expression by calling it like a function
summary(dataset())
output$summary <- renderPrint({
# Use a reactive expression by calling it like a function
summary(dataset())
})
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
output$summary <- renderPrint({
dataset <- get(input$dataset, "package:datasets")
summary(dataset)
})
output$table <- renderTable({
dataset <- get(input$dataset, "package:datasets")
dataset
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
# Create a reactive expression
dataset <- reactive({
get(input$dataset, "package:datasets")
})
output$summary <- renderPrint({
# Use a reactive expression by calling it like a function
summary(dataset())
})
output$table <- renderTable({
dataset()
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(dplyr)
library(ggplot2)
# Example data frame
car_data <- data.frame(
Brand = c('Brand A', 'Brand B', 'Brand A', 'Brand C'),
UsedOrNew = c('Used', 'New', 'New', 'Used'),
Transmission = c('Automatic', 'Manual', 'Automatic', 'Manual'),
DriveType = c('FWD', 'AWD', 'FWD', 'RWD'),
FuelType = c('Gasoline', 'Diesel', 'Gasoline', 'Electric'),
BodyType = c('Sedan', 'SUV', 'Coupe', 'Hatchback'),
Doors = c(4, 4, 2, 4),
Seats = c(5, 5, 4, 5),
Engine_cylinder_number = c(4, 6, 4, 3),
Year = c(2010, 2020, 2018, 2015),
Kilometres = c(20000, 0, 10000, 50000),
Price = c(10000, 30000, 25000, 12000),
fuel_comsumption_liter = c(8, 6, 9, 5)
)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "Car Dashboard"),
dashboardSidebar(
selectInput("brand", "Brand", choices = unique(car_data$Brand), multiple = TRUE),
selectInput("usedOrNew", "New or Used", choices = unique(car_data$UsedOrNew)),
selectInput("transmission", "Transmission", choices = unique(car_data$Transmission)),
selectInput("driveType", "Drive Type", choices = unique(car_data$DriveType)),
selectInput("fuelType", "Fuel Type", choices = unique(car_data$FuelType)),
selectInput("bodyType", "Body Type", choices = unique(car_data$BodyType)),
selectInput("doors", "Doors", choices = unique(car_data$Doors)),
selectInput("seats", "Seats", choices = unique(car_data$Seats)),
selectInput("engineCyl", "Engine Cylinder Number", choices = unique(car_data$Engine_cylinder_number))
),
dashboardBody(
fluidRow(
box(plotOutput("pricePlot", height = 250)),
box(plotOutput("fuelPlot", height = 250))
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive expression to filter data based on inputs
filteredData <- reactive({
car_data %>%
filter(
(Brand %in% input$brand) | (input$brand[1] == ""),
(UsedOrNew %in% input$usedOrNew) | (input$usedOrNew[1] == ""),
(Transmission %in% input$transmission) | (input$transmission[1] == ""),
(DriveType %in% input$driveType) | (input$driveType[1] == ""),
(FuelType %in% input$fuelType) | (input$fuelType[1] == ""),
(BodyType %in% input$bodyType) | (input$bodyType[1] == ""),
(Doors %in% input$doors) | (input$doors[1] == ""),
(Seats %in% input$seats) | (input$seats[1] == ""),
(Engine_cylinder_number %in% input$engineCyl) | (input$engineCyl[1] == "")
)
})
# Output for Price Plot
output$pricePlot <- renderPlot({
ggplot(filteredData(), aes(x = Year, y = Price, group = Brand, color = Brand)) +
geom_line() +
theme_minimal() +
labs(title = "Price Over Years", x = "Year", y = "Price")
})
# Output for Fuel Consumption Plot
output$fuelPlot <- renderPlot({
ggplot(filteredData(), aes(x = Year, y = fuel_comsumption_liter, group = Brand, color = Brand)) +
geom_line() +
theme_minimal() +
labs(title = "Fuel Consumption Over Years", x = "Year", y = "Fuel Consumption (liters)")
})
}
# Run the application
shinyApp(ui, server)
# Example data frame
car_data <- read.csv("preprocessed_car_data.csv")
# Example data frame
car_data <- read.csv("preporcessed/preprocessed_car_data.csv")
# Example data frame
car_data <- read.csv(preporcessed/preprocessed_car_data.csv)
# Example data frame
car_data <- read.csv(/preporcessed/preprocessed_car_data.csv)
# Example data frame
car_data <- read.csv(/preporcessed/preprocessed_car_data.csv)
# Example data frame
car_data <- read.csv("preporcessed/preprocessed_car_data.csv")
# Example data frame
car_data <- read.csv("data/preporcessed/preprocessed_car_data.csv")
head(car_data)
library(shiny)
library(shinydashboard)
library(dplyr)
library(ggplot2)
# Example data frame
car_data <- read.csv("data/preporcessed/preprocessed_car_data.csv")
head(car_data)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "Car Dashboard"),
dashboardSidebar(
selectInput("brand", "Brand", choices = unique(car_data$Brand), multiple = TRUE),
selectInput("usedOrNew", "New or Used", choices = unique(car_data$UsedOrNew)),
selectInput("transmission", "Transmission", choices = unique(car_data$Transmission)),
selectInput("driveType", "Drive Type", choices = unique(car_data$DriveType)),
selectInput("fuelType", "Fuel Type", choices = unique(car_data$FuelType)),
selectInput("bodyType", "Body Type", choices = unique(car_data$BodyType)),
selectInput("doors", "Doors", choices = unique(car_data$Doors)),
selectInput("seats", "Seats", choices = unique(car_data$Seats)),
selectInput("engineCyl", "Engine Cylinder Number", choices = unique(car_data$Engine_cylinder_number))
),
dashboardBody(
fluidRow(
box(plotOutput("pricePlot", height = 250)),
box(plotOutput("fuelPlot", height = 250))
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive expression to filter data based on inputs
filteredData <- reactive({
car_data %>%
filter(
(Brand %in% input$brand) | (input$brand[1] == ""),
(UsedOrNew %in% input$usedOrNew) | (input$usedOrNew[1] == ""),
(Transmission %in% input$transmission) | (input$transmission[1] == ""),
(DriveType %in% input$driveType) | (input$driveType[1] == ""),
(FuelType %in% input$fuelType) | (input$fuelType[1] == ""),
(BodyType %in% input$bodyType) | (input$bodyType[1] == ""),
(Doors %in% input$doors) | (input$doors[1] == ""),
(Seats %in% input$seats) | (input$seats[1] == ""),
(Engine_cylinder_number %in% input$engineCyl) | (input$engineCyl[1] == "")
)
})
# Output for Price Plot
output$pricePlot <- renderPlot({
ggplot(filteredData(), aes(x = Year, y = Price, group = Brand, color = Brand)) +
geom_line() +
theme_minimal() +
labs(title = "Price Over Years", x = "Year", y = "Price")
})
# Output for Fuel Consumption Plot
output$fuelPlot <- renderPlot({
ggplot(filteredData(), aes(x = Year, y = fuel_comsumption_liter, group = Brand, color = Brand)) +
geom_line() +
theme_minimal() +
labs(title = "Fuel Consumption Over Years", x = "Year", y = "Fuel Consumption (liters)")
})
}
# Run the application
shinyApp(ui, server)
runApp()
install.packages("shinydashboard")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("plotly")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(nrow(filteredData))
runApp()
runApp()
runApp()
runApp()
